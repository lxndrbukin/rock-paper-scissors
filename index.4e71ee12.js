class e{constructor(e){this.parent=e,this.regions={}}regionsMap(){return{}}eventsMap(){return{}}bindEvents(e){const s=this.eventsMap();for(let r in s){const[t,o]=r.split(":");e.querySelectorAll(o).forEach((e=>{e.addEventListener(t,s[r])}))}}mapRegions(e){const s=this.regionsMap();for(let r in s){const t=s[r],o=e.querySelector(t);o&&(this.regions[r]=o)}}onRender(){}render(){this.parent.innerHTML="";const e=document.createElement("template");e.innerHTML+=this.template(),this.bindEvents(e.content),this.mapRegions(e.content),this.onRender(),this.parent.append(e.content)}}class s extends e{constructor(e,s,r,t){super(e),this.parent=e,this.playerNum=s,this.choice=r,this.score=t}template(){return`\n      <div class='player-data'>\n        <h5>Player ${this.playerNum}</h5>\n        <h5>Score: ${this.score}</h5>\n        <span class='player-choice'>\n          <i class='fa-solid fa-hand-${this.choice.toLowerCase()}'></i>\n        </span>\n      </div>\n    `}}class r extends e{constructor(e,s){super(e),this.parent=e,this.result=s}template(){return`\n      <div class='message-text'>\n        ${this.result}\n      </div>\n    `}}let t;var o;let c;var i;let n;var a;(o=t||(t={})).Paper="Paper",o.Rock="Rock",o.Scissors="Scissors",(i=c||(c={})).RP="RockPaper",i.PR="PaperRock",i.SR="ScissorsRock",i.RS="RockScissors",i.PS="PaperScissors",i.SP="ScissorsPaper",i.RR="RockRock",i.PP="PaperPaper",i.SS="ScissorsScissors",(a=n||(n={})).PlayerScore="playerScore",a.ComputerScore="computerScore";const h=document.querySelector("#root");h&&new class extends e{choices=[t.Rock,t.Paper,t.Scissors];playerChoice="";computerChoice="";playerScore=Number(localStorage.getItem(n.PlayerScore))||0;computerScore=Number(localStorage.getItem(n.ComputerScore))||0;regionsMap(){return{choices:".choices",message:".message",playerOne:".player-one",playerTwo:".player-two"}}eventsMap(){return{"click:.choice":e=>{this.playerChoice=e.target.name,this.computerChoice=this.choices[Math.floor(Math.random()*this.choices.length)],this.render()}}}get gameWin(){switch(this.playerChoice+this.computerChoice){case c.PR:case c.RS:case c.SP:return this.playerScore=this.playerScore+1,localStorage.setItem(n.PlayerScore,JSON.stringify(this.playerScore)),`<b>${this.playerChoice}</b> beat(s) <b>${this.computerChoice}</b>. You win!`;case c.RP:case c.SR:case c.PS:return this.computerScore=this.computerScore+1,localStorage.setItem(n.ComputerScore,JSON.stringify(this.computerScore)),`<b>${this.computerChoice}</b> beat(s) <b>${this.playerChoice}</b>. Computer wins!`;case c.RR:case c.PP:case c.SS:return"It's a tie!";default:return"Time to play!"}}renderChoices=()=>this.choices.map((e=>`\n        <button class='choice' name='${e}'>\n          <i class='fa-solid fa-hand-${e.toLowerCase()}'></i>\n        </button>\n      `));onRender(){new s(this.regions.playerOne,1,this.playerChoice,this.playerScore).render(),new s(this.regions.playerTwo,2,this.computerChoice,this.computerScore).render(),new r(this.regions.message,this.gameWin).render()}template(){return`\n      <div class='board'>\n        <div class='message'></div>\n        <div class='players'>\n          <div class='player player-one'></div>\n          <div class='player player-two'></div>\n        </div>\n        <div class='choices'>\n          <h4>Choices:</h4>\n          <div class='choice-btns'>\n            ${this.renderChoices().join("")}\n          </div>\n        </div>\n      </div>\n    `}}(h).render();
//# sourceMappingURL=index.4e71ee12.js.map
