{"mappings":"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","sources":["src/model/View.ts","src/components/Player.ts","src/components/Message.ts","src/components/types.ts","src/index.ts","src/components/App.ts"],"sourcesContent":["export abstract class View {\r\n  regions: { [key: string]: Element; } = {};\r\n\r\n  constructor(public parent: Element) {\r\n  }\r\n\r\n  abstract template(): string;\r\n\r\n  regionsMap(): { [key: string]: string; } {\r\n    return {};\r\n  }\r\n\r\n  eventsMap(): { [key: string]: () => void; } {\r\n    return {};\r\n  }\r\n\r\n  bindEvents(fragment: DocumentFragment): void {\r\n    const eventsMap = this.eventsMap();\r\n    for (let eventKey in eventsMap) {\r\n      const [eventName, selector] = eventKey.split(':');\r\n      fragment.querySelectorAll(selector).forEach((element) => {\r\n        element.addEventListener(eventName, eventsMap[eventKey]);\r\n      });\r\n    }\r\n  }\r\n\r\n  mapRegions(fragment: DocumentFragment): void {\r\n    const regionsMap = this.regionsMap();\r\n    for (let key in regionsMap) {\r\n      const selector = regionsMap[key];\r\n      const element = fragment.querySelector(selector);\r\n      if (element) {\r\n        this.regions[key] = element;\r\n      }\r\n    }\r\n  }\r\n\r\n  onRender(): void { }\r\n\r\n  render(): void {\r\n    this.parent.innerHTML = '';\r\n    const templateElement = document.createElement('template');\r\n    templateElement.innerHTML += this.template();\r\n    this.bindEvents(templateElement.content);\r\n    this.mapRegions(templateElement.content);\r\n    this.onRender();\r\n    this.parent.append(templateElement.content);\r\n  }\r\n}","import { View } from '../model/View';\r\n\r\nexport class Player extends View {\r\n  constructor(public parent: Element, public playerNum: number, public choice: string, public score: number) {\r\n    super(parent);\r\n  }\r\n\r\n  template(): string {\r\n    return `\r\n      <div class='player-data'>\r\n        <h5>Player ${this.playerNum}</h5>\r\n        <h5>Score: ${this.score}</h5>\r\n        <span class='player-choice'>\r\n          <i class='fa-solid fa-hand-${this.choice.toLowerCase()}'></i>\r\n        </span>\r\n      </div>\r\n    `;\r\n  }\r\n}","import { View } from '../model/View';\r\n\r\nexport class Message extends View {\r\n  constructor(public parent: Element, public result: string) {\r\n    super(parent);\r\n  }\r\n\r\n  template(): string {\r\n    return `\r\n      <div class='message-text'>\r\n        ${this.result}\r\n      </div>\r\n    `;\r\n  }\r\n}","export enum Choices {\r\n  Paper = 'Paper',\r\n  Rock = 'Rock',\r\n  Scissors = 'Scissors'\r\n}\r\n\r\nexport enum Combinations {\r\n  RP = 'RockPaper',\r\n  PR = 'PaperRock',\r\n  SR = 'ScissorsRock',\r\n  RS = 'RockScissors',\r\n  PS = 'PaperScissors',\r\n  SP = 'ScissorsPaper',\r\n  RR = 'RockRock',\r\n  PP = 'PaperPaper',\r\n  SS = 'ScissorsScissors'\r\n}\r\n\r\nexport enum LocalStorage {\r\n  PlayerScore = 'playerScore',\r\n  ComputerScore = 'computerScore'\r\n}","import { App } from './components/App';\r\n\r\nconst root = document.querySelector('#root');\r\n\r\nif (root) {\r\n  new App(root).render();\r\n}","import { View } from '../model/View';\r\nimport { Player } from './Player';\r\nimport { Message } from './Message';\r\nimport { Choices, Combinations, LocalStorage } from './types';\r\n\r\n\r\nexport class App extends View {\r\n  choices: string[] = [Choices.Rock, Choices.Paper, Choices.Scissors];\r\n  playerChoice: string = '';\r\n  computerChoice: string = '';\r\n  playerScore: number = Number(localStorage.getItem(LocalStorage.PlayerScore)) || 0;\r\n  computerScore: number = Number(localStorage.getItem(LocalStorage.ComputerScore)) || 0;\r\n\r\n  regionsMap(): { [key: string]: string; } {\r\n    return {\r\n      choices: '.choices',\r\n      message: '.message',\r\n      playerOne: '.player-one',\r\n      playerTwo: '.player-two'\r\n    };\r\n  }\r\n\r\n  eventsMap(): { [key: string]: (e?: any) => void; } {\r\n    return {\r\n      'click:.choice': (e: any) => {\r\n        this.playerChoice = e.target.name;\r\n        this.computerChoice = this.choices[Math.floor(Math.random() * this.choices.length)];\r\n        this.render();\r\n      }\r\n    };\r\n  }\r\n\r\n  get gameWin(): string {\r\n    switch (this.playerChoice + this.computerChoice) {\r\n      case Combinations.PR:\r\n      case Combinations.RS:\r\n      case Combinations.SP:\r\n        this.playerScore = this.playerScore + 1;\r\n        localStorage.setItem(LocalStorage.PlayerScore, JSON.stringify(this.playerScore));\r\n        return `<b>${this.playerChoice}</b> beat(s) <b>${this.computerChoice}</b>. You win!`;\r\n      case Combinations.RP:\r\n      case Combinations.SR:\r\n      case Combinations.PS:\r\n        this.computerScore = this.computerScore + 1;\r\n        localStorage.setItem(LocalStorage.ComputerScore, JSON.stringify(this.computerScore));\r\n        return `<b>${this.computerChoice}</b> beat(s) <b>${this.playerChoice}</b>. Computer wins!`;\r\n      case Combinations.RR:\r\n      case Combinations.PP:\r\n      case Combinations.SS:\r\n        return `It's a tie!`;\r\n      default:\r\n        return 'Time to play!';\r\n    }\r\n  }\r\n\r\n  renderChoices = (): string[] => {\r\n    return this.choices.map((choice: string) => {\r\n      return `\r\n        <button class='choice' name='${choice}'>\r\n          <i class='fa-solid fa-hand-${choice.toLowerCase()}'></i>\r\n        </button>\r\n      `;\r\n    });\r\n  };\r\n\r\n  onRender(): void {\r\n    new Player(this.regions.playerOne, 1, this.playerChoice, this.playerScore).render();\r\n    new Player(this.regions.playerTwo, 2, this.computerChoice, this.computerScore).render();\r\n    new Message(this.regions.message, this.gameWin).render();\r\n  }\r\n\r\n  template(): string {\r\n    return `\r\n      <div class='board'>\r\n        <div class='message'></div>\r\n        <div class='players'>\r\n          <div class='player player-one'></div>\r\n          <div class='player player-two'></div>\r\n        </div>\r\n        <div class='choices'>\r\n          <h4>Choices:</h4>\r\n          <div class='choice-btns'>\r\n            ${this.renderChoices().join('')}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}"],"names":["$c66f7d8fe0ef3abd$export$27a5bd065ad55220","constructor","parent","regions","regionsMap","eventsMap","bindEvents","fragment","this","eventKey","eventName","selector","split","querySelectorAll","forEach","element","addEventListener","mapRegions","key","querySelector","onRender","render","innerHTML","templateElement","document","createElement","template","content","append","$6d91ef257fa813c6$export$2616165974278734","playerNum","choice","score","super","$e459b81fca3ade06$export$f69c19e57285b83a","result","$9b839aefcaa293ff$export$cf48ff570b87adb1","Choices","$9b839aefcaa293ff$export$d5e2cc659c2c2166","Combinations","$9b839aefcaa293ff$export$19fffca37ef3e106","LocalStorage","$b4e14b6b8da86996$var$root","choices","Rock","Paper","Scissors","playerChoice","computerChoice","playerScore","Number","localStorage","getItem","PlayerScore","computerScore","ComputerScore","message","playerOne","playerTwo","e","target","name","Math","floor","random","length","gameWin","PR","RS","SP","setItem","JSON","stringify","RP","SR","PS","RR","PP","SS","renderChoices","map","toLowerCase"],"version":3,"file":"index.4e71ee12.js.map"}